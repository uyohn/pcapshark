#include <stdio.h>
#include <pcap/pcap.h>
#include <sys/types.h>

void packetHandler (u_char *userData, const struct pcap_pkthdr *pkthdr, const u_char *packet);

int main () {
	char errbuf[PCAP_ERRBUF_SIZE];

	pcap_t *handle = pcap_open_offline("savefile/eth-1.pcap", errbuf);

	if (handle == NULL) {
		printf("Error while opening .pcap: %s\n", errbuf);
		return 0;
	}

	// print the capture fd - magic number?
	printf("%d\n", pcap_get_selectable_fd(handle));

	// start packet processing loop, just like live capture
	if (pcap_loop(handle, 0, packetHandler, NULL) < 0) {
		printf("pcap_loop() failed: %s\n", pcap_geterr(handle));
		return 1;
	}

	printf("capture finished\n");

	pcap_close(handle);
	return 0;
}

void packetHandler (u_char *userData, const struct pcap_pkthdr *pkthdr, const u_char *packet) {
	const struct ether_header* ethernetHeader;
	const struct ip* ipHeader;
	const struct tcphdr* tcpHeader;
	char sourceIp[INET_ADDRSTRLEN];
	char destIp[INET_ADDRSTRLEN];
	u_int sourcePort, destPort;
	u_char *data;
	int dataLength = 0;
	string dataStr = "";

	ethernetHeader = (struct ether_header*)packet;
	if (ntohs(ethernetHeader->ether_type) == ETHERTYPE_IP) {
		ipHeader = (struct ip*)(packet + sizeof(struct ether_header));
		inet_ntop(AF_INET, &(ipHeader->ip_src), sourceIp, INET_ADDRSTRLEN);
		inet_ntop(AF_INET, &(ipHeader->ip_dst), destIp, INET_ADDRSTRLEN);

		if (ipHeader->ip_p == IPPROTO_TCP) {
			tcpHeader = (tcphdr*)(packet + sizeof(struct ether_header) + sizeof(struct ip));
			sourcePort = ntohs(tcpHeader->source);
			destPort = ntohs(tcpHeader->dest);
			data = (u_char*)(packet + sizeof(struct ether_header) + sizeof(struct ip) + sizeof(struct tcphdr));
			dataLength = pkthdr->len - (sizeof(struct ether_header) + sizeof(struct ip) + sizeof(struct tcphdr));

			// convert non-printable characters, other than carriage return, line feed,
			// or tab into periods when displayed.
			for (int i = 0; i < dataLength; i++) {
				if ((data[i] >= 32 && data[i] <= 126) || data[i] == 10 || data[i] == 11 || data[i] == 13) {
					dataStr += (char)data[i];
				} else {
					dataStr += ".";
				}
			}

			// print the results
			cout << sourceIp << ":" << sourcePort << " -> " << destIp << ":" << destPort << endl;
			if (dataLength > 0) {
				cout << dataStr << endl;
			}
		}
	}
}
